@using Dragonfly.NetHelpers
@using Dragonfly.NetModels;
@using Dragonfly.UmbracoSiteTester
@using Dragonfly.UmbracoSiteTester.Models

@inject SiteTesterService TesterService

@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<StatusMessage>
@{
	var config = TesterService.GetAppDataConfig();
    var status = Model;

    //var DisplayTitle = Dragonfly.Umbraco7Helpers.Mvc.GetSafeViewDataString(ViewData, "DisplayTitle");
    var TestResultSet = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "TestResultSet") as TestResultSet;
    var FilesList = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "FilesList") as IEnumerable<FileInfo>;
    var DisplayMode = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "DisplayMode");
    var ResultFilter = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "ResultFilter");

    var fileName = Context.Request.Query["FileName"];

    //Column Widths
    var col1Class = "col-sm-3";
    var col2Class = "col-sm-9";

    var pvException = HtmlHelpers.GetViewsPath(config) + "Partials/ExceptionDetailsLink.cshtml";
    var pvSS = HtmlHelpers.GetViewsPath(config) + "Partials/StylesScripts.cshtml";
    var pvStatus = HtmlHelpers.GetViewsPath(config) + "Partials/StatusMessage.cshtml";
    var pvFilesList = HtmlHelpers.GetViewsPath(config) + "Partials/FilesList.cshtml";

    var resultsDate = TestResultSet.TestStartTimestamp != DateTime.MinValue ? HtmlHelpers.FormatUtcDateTime(config, TestResultSet.TestStartTimestamp.ToUniversalTime()) : "Unknown";
    var durationSpan = (TestResultSet.TestEndTimestamp - TestResultSet.TestStartTimestamp);
    var nodeInfo = TestResultSet.StartNode == 0 ? "All Nodes" : string.Format("'{0}' & descendants", Umbraco.Content(TestResultSet.StartNode).Name);

}
<!DOCTYPE html>
<html>
<head>
    @Html.Partial(pvSS, "styles")
</head>
<body>
    <div class="container">

        <div class="d-inline-flex p-2" style="padding: .5em 0;">
            <a class="btn btn-sm btn-primary mr-2" href="/umbraco/backoffice/Dragonfly/SiteTester/Start">Back to Start</a>
            <a class="btn btn-sm btn-success mr-2" href="/umbraco/backoffice/Dragonfly/SiteTester/TestAllNodesAndSave">Test All Nodes Now</a>
        </div>
        <h1>Test Results</h1>

        @if (!status.Success)
        {
            @Html.Partial(pvStatus, status)
        }
        else
        {
            if (DisplayMode == "list")
            {
                @Html.Partial(pvFilesList, FilesList)
            }
            else if (DisplayMode == "results")
            {
                if (TestResultSet != null)
                {
 
                    <div class="card card-default">
                        <h5 class="card-header">Summary</h5>
                        <div class="card-body">
                            <dl class="row">
                                <dt class="@col1Class">Date/Time</dt>
                                <dd class="@col2Class">@resultsDate</dd>
                            </dl>
                            <dl class="row">
                                <dt class="@col1Class">Nodes Tested</dt>
                                <dd class="@col2Class">@nodeInfo</dd>
                            </dl>
                            <dl class="row">
                                <dt class="@col1Class">Operation Duration</dt>
                                <dd class="@col2Class">@durationSpan.TotalMinutes minutes</dd>
                            </dl>
                            <dl class="row">
                                <dt class="@col1Class">Results</dt>
                                <dd class="@col2Class">
                                    @foreach (var summ in TestResultSet.Summary)
                                    {
                                        var filterUrl = Dragonfly.NetHelpers.Urls.AppendQueryStringToUrl(Context.Request.Url(), "ResultFilter", summ.Key);
                                        <div><a href="@filterUrl"><b>@summ.Key</b></a> : <span>@summ.Value</span></div>
                                    }
                                </dd>
                            </dl>
                            <dl class="row">
                                <dt class="@col1Class">Has Stored HTML?</dt>
                                <dd class="@col2Class">
                                    @if (TestResultSet.HasStoredHtml)
                                    {
                                        var url = string.Format("/umbraco/backoffice/Dragonfly/SiteTester/GatherOutgoingLinks?FileName={0}", fileName);

                                        <text>Yes</text>
                                        if (TestResultSet.HasLinkTestResults)
                                        {
                                            <div class="d-inline-flex p-2" style="padding: .5em 0;">
                                                <a class="btn btn-sm btn-success mr-2" href="@url">View Outgoing Link Test Results</a>
                                            </div>
                                        }
                                    }
                                    else
                                    { <text>No</text>}

                                </dd>
                            </dl>
                            <dl class="row">
                                <dt class="@col1Class">Has Gathered Links?</dt>
                                <dd class="@col2Class">
                                    @if (TestResultSet.HasLinkTestResults)
                                    {
                                        var url = string.Format("/umbraco/backoffice/Dragonfly/SiteTester/GatherOutgoingLinks?FileName={0}", fileName);

                                        <text>Yes</text>
                                        if (TestResultSet.HasLinkTestResults)
                                        {
                                            <div class="d-inline-flex p-2" style="padding: .5em 0;">
                                                <a class="btn btn-sm btn-success mr-2" href="@url">View Outgoing Link Test Results</a>
                                            </div>
                                        }
                                    }
                                    else
                                    { <text>No</text>}

                                </dd>
                            </dl>
                        </div>
                    </div>

                    <h2>Results</h2>

                    var counter = 0;
                    var finalResults = ResultFilter != "" ? TestResultSet.Results.Where(n => n.Result.ToString() == ResultFilter) : TestResultSet.Results;
                    <table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="width: 100%">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Actions</th>
                                <th>Result</th>
                                <th>Status Code</th>
                                <th>On-page Errors</th>
                                <th>Node Name</th>
                                <th>DocType</th>
                                <th>Node ID</th>
                                <th>Exception</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var result in finalResults)
                            {
                                counter++;

                                <tr>
                                    <td>@counter</td>
                                    <td>
                                        <!--Actions-->
                                        <a href="/umbraco/#/content/content/edit/@result.NodeId" target="_blank">Edit</a>
                                        @if (result.Url != "")
                                        {
                                            <span> | </span><a href="@result.Url" target="_blank">View</a>
                                        }
                                    </td>
                                    <td>@result.Result</td>
                                    <td>@result.StatusCode</td>
                                    <td>
                                        @if (result.ContentErrorMatches != null)
                                        {
                                            var encodedErrors = result.ContentErrorMatches.Select(n => n.HtmlEncode());
                                            <span>@Html.Raw(string.Join("<br/>", encodedErrors))</span>
                                        }
                                    </td>
                                    <td>@result.NodeName</td>
                                    <td>@result.ContentTypeAlias</td>
                                    <td>@result.NodeId</td>
                                    <td>
                                        @if (result.ExceptionInfo != null)
                                        {
                                            <pre>@result.ExceptionInfo.Message</pre>
                                            @Html.Partial(pvException, result.ExceptionInfo)
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                }
                else
                {
                    <i style="color:red;">There is no data available currently.</i>
                }
            }
        }

    </div>

    @Html.Partial(pvSS, "scripts")

    <script type="text/javascript">
        $(document).ready(function () {

            // Setup - add a text input to each footer cell
            $('#umbracodata tfoot th').each(function () {
                var title = $(this).text();
                $(this).html('<input type="text" placeholder="Search ' + title + '" />');
            });

            $('#umbracodata').DataTable({
                "lengthMenu": [[10, 25, 50, - 1], [10, 25, 50, "All"]]
            });

            // Apply the search
            table.columns().every(function () {
                var that = this;

                $('input', this.footer()).on('keyup change', function () {
                    if (that.search() !== this.value) {
                        that
                            .search(this.value)
                            .draw();
                    }
                });
            });

        });
    </script>
</body>
</html>
